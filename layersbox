#!/usr/bin/env python2

import subprocess
import os
join = os.path.join
import sys
import argparse
import shutil
import re

programs = ["docker", "docker-compose"]
yml = "docker-compose.yml"
minimal = 'minimal.yml'
# src = os.path.dirname(os.path.realpath(__file__))

minimal_data = '''adapterdata:
    container_name: adapter-data
    image: learninglayers/adapter-data
    env_file:
        - common.env
adapterservices:
    image: learninglayers/adapter-externals
adapter:
    container_name: adapter
    image: learninglayers/adapter
    volumes_from:
        - adapterdata
        - adapterservices
    volumes:
        - ./ssl/:/usr/local/openresty/conf/ssl/
    env_file:
        - common.env
    ports:
        - "80:80"
        - "443:443"
'''

def which(program):
    """Emulates the 'which' utility and checks wether a program exists in PATH and is executable

    :program: String containing the name of the program
    :returns: True if the program exists and is executable, False otherwise
    """
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

def check_programs(programs):
    """Checks if given programs are in PATH

    :program: List of program names
    :returns: True if all programs exist, False otherwise

    """
    for p in programs:
        if not which(p):
            print("% is not installed! Exiting.".format(p))
            return False
    return True

def read_url(dst):
    """Reads the LayersBox URL from the common.env file

    :dest: The directory of the LayersBox
    :returns: the LayersBox URL

    """
    dst_env = join(dst, 'common.env')
    try:
        os.stat(dst_env)
        with open(dst_env, 'r') as f:
            lines = f.readlines()
            p = re.compile('^LAYERS_API_URI=https://(.*)/$')
            for line in lines:
                line = line.strip()
                m = p.match(line)
                if m:
                    return m.group(1)
    except:
        raise

def check_tls(dst, url):
    """Checks if the TLS certificate and key are where they should be

    :dest: folder of the LayersBox
    :returns: True if everything is OK, False otherwise

    """
    ssl_path = join(dst, 'ssl/')
    try:
        os.stat(join(ssl_path, url + '.pem'))
        os.stat(join(ssl_path, url + '.key'))
        return True
    except:
        print("Please put your TLS certificate {0}.pem and key {0}.key into {1}".format(url, join(dst, 'ssl/')))
        return False

def box_start(args):
    """Starts a LayersBox"""
    try:
        read_url(args.directory)
    except:
        print("This directory does not seem to contain a LayersBox")
        return 1
    subprocess.check_output(["docker-compose", "up", "-d"])
    return 0

def box_stop(args):
    """Stops a LayersBox"""
    try:
        read_url(args.directory)
    except:
        print("This directory does not seem to contain a LayersBox")
        return 1
    subprocess.check_output(["docker-compose", "stop"])
    return 0

def box_logs(args):
    """Shows logs of a LayersBox"""
    dir = args.directory
    subprocess.check_output(["docker-compose", "logs"])
    return 0

def box_ps(args):
    """Shows the states of the services inside the LayersBox"""
    dir = args.directory
    print (subprocess.check_output(["docker-compose", "ps"]))
    return 0

def box_init(args):
    """Initializes a LayersBox"""
    print("Initializing LayersBox...")
    dst = args.directory
    url = "THIS SHOULD HAVE BEEN REPLACED"
    try:
        url = read_url(dst)
        print("Found existing configuration, using URL https://{}/".format(url))
    except:
        url = raw_input("Enter the URL the box should be reachable at. (Don't put a / at the end)\nhttps://").strip("/")
        with open("common.env", 'w') as f:
            f.write("LAYERS_API_URI=https://{}/\n".format(url))
            f.write("LAYERS_API_URL=https://{}/\n".format(url))
            f.write("LAYERS_APP_URI=https://{}/\n".format(url))
    dst_yml = join(dst, yml)
    try:
        os.stat(dst_yml)
        print("Found docker-compose configuration")
    except:
        print("No docker configuration found, using minimal configuration")
        with open(dst_yml, 'w') as f:
            f.write(minimal_data)

    ssl_dir = join(dst, 'ssl/')
    if not os.path.exists(ssl_dir):
        os.makedirs(ssl_dir)
    print("Initializion complete.")
    check_tls(dst, url)
    print("Make sure port 80 and 443 are not in use on this machine")
    print("You can start your LayersBox with 'layersbox start'")
    return 0

def parse_args():
    """Parses the command line arguments to choose which action should be taken
    """
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='commands (use "layersbox -h command" to find out about their parameters)', dest='command')

    start_parser = subparsers.add_parser('start', help='Starts the LayersBox')
    start_parser.add_argument('--directory', '-d', action='store', help='Directory of the box', default='.')
    start_parser.set_defaults(func=box_start)

    stop_parser  = subparsers.add_parser("stop", help="Stops the LayersBox")
    stop_parser.add_argument('--directory', '-d', action='store', help='Directory of the box', default='.')
    stop_parser.set_defaults(func=box_stop)

    init_parser  = subparsers.add_parser("init", help="Initializes a LayersBox in the current directory")
    init_parser.add_argument('--directory', '-d', action='store', help='The directory to use', default='.')
    init_parser.set_defaults(func=box_init)

    # logs_parser = subparsers.add_parser('logs', help='Shows logs of the LayersBox')
    # logs_parser.add_argument('--directory', '-d', action='store', help='Directory of the box', default='.')
    # logs_parser.set_defaults(func=box_logs)

    ps_parser = subparsers.add_parser('status', help='Shows the states of the services inside the LayersBox')
    ps_parser.add_argument('--directory', '-d', action='store', help='Directory of the box', default='.')
    ps_parser.set_defaults(func=box_ps)

    return parser.parse_args()

def check_yml(dst):
    """Check if docker-compose.yml exists
    :returns: True if it exists, False otherwise
    """
    try:
        os.stat(join(dst, yml))
    except:
        print("{} is missing in directory {}.".format(yml, dst))
        sys.exit(1)


def main():
    """Entrypoint
    """
    if not check_programs(programs):
        sys.exit(1)


    parsed = parse_args()
    sys.exit(parsed.func(parsed))


if __name__ == "__main__":
    main()
